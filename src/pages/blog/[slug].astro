---
import Layout from '../../layouts/Layout.astro';
import Seo from '../../components/Seo.astro';
import JsonLd from '../../components/JsonLd.astro';
import { getCollection } from 'astro:content';

// Build all blog pages at build time
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const base = import.meta.env.BASE_URL;
// Always prefix base; strip any leading slash; pass-through http(s)
const resolveAsset = (p?: string) =>
  p ? (p.startsWith('http') ? p : `${base}${p.replace(/^\/?/, '')}`) : '';

// receive the entry from getStaticPaths()
const { entry } = Astro.props as { entry: any };

// render() gives us a Content component and headings array
const { Content, headings } = await entry.render();

// If the markdown already has a top-level H1, don’t render our own.
const hasH1 = Array.isArray(headings) && headings[0]?.depth === 1;

const site = Astro.site?.toString() ?? 'https://misty-light-media.github.io/vitaledge-site/';
const path = `/blog/${entry.slug}/`;
const heroImg = resolveAsset(entry.data.heroImage);
const ogImg = resolveAsset(entry.data.previewImage || entry.data.heroImage);
---

<Layout title={entry.data.title}>
  <Seo
    title={entry.data.title}
    description={entry.data.description}
    path={path}
    image={ogImg}
    type="article"
  />

  <JsonLd json={{
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": entry.data.title,
    "description": entry.data.description,
    "datePublished": entry.data.pubDate,
    "dateModified": entry.data.updatedDate ?? entry.data.pubDate,
    "author": entry.data.author ? [{"@type":"Person","name": entry.data.author}] : undefined,
    "image": ogImg ? new URL(ogImg, site).toString() : undefined,
    "mainEntityOfPage": new URL(path, site).toString(),
    "keywords": Array.isArray(entry.data.tags) ? entry.data.tags.join(', ') : undefined
  }} />

  <main class="max-w-3xl mx-auto px-4 py-10">
    <article class="prose max-w-none">
      {heroImg && <img src={heroImg} alt={entry.data.title} class="w-full rounded-xl mb-6" />}
      {!hasH1 && <h1>{entry.data.title}</h1>}
      <p class="text-sm text-gray-500">
        {new Date(entry.data.pubDate).toLocaleDateString()}
        {entry.data.readingTime ? ` · ${entry.data.readingTime} min read` : ''}
      </p>

      {/* Render the markdown content */}
      <Content />
    </article>
  </main>
</Layout>
